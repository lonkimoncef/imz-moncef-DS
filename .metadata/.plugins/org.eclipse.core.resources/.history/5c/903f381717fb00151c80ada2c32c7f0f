package Styk_Seminar_3;


public class console {

	public static void main(String[] args)
			throws ClassNotFoundException, UnknownHostException, IOException, NotBoundException {
		try {
			Registry registry = LocateRegistry.getRegistry("lv.rst.uk.to", 152);
			proxy = (IServer) registry.lookup(IServer.RMI_SERVER_NAME);
			String[] parts;
			InputStreamReader isr = new InputStreamReader(System.in);
			BufferedReader br = new BufferedReader(isr);
			String s = null;
			Timer timeToReceiveMsg = new Timer();
			System.out.printf("Enter String%n");
			boolean isClosed = false;
			boolean isTimerStarted = false;
			while (!isClosed) {

				s = br.readLine();
				parts = s.split(" ");
				switch (parts[0]) {
				case "ping":
					try {
						proxy.ping();
					} catch (RemoteException ex) {
						// handle communication exception
					}
					break;
				case "echo":
					try {
						System.out.println(proxy.echo(String.join(" ", partsout(parts, 1))));
					} catch (RemoteException ex) {
						// handle communication exception
					}
					break;
				case "login":
					try {
						sessionID = proxy.login(parts[1], parts[2]);
						System.out.println(sessionID);
						if (sessionID != null && !isTimerStarted)
							isTimerStarted = true;
						timeToReceiveMsg.schedule(new MyTimerTask(), 0, 1000);
					} catch (RemoteException ex) {
						// handle communication exception
					}
					break;
				case "list":
					try {
						System.out.println("List of active users:" + Arrays.toString(proxy.listUsers(sessionID)));
					} catch (RemoteException ex) {
						// handle communication exception
					}
					break;
				case "msg":
					try {
						Message NewMessage = new Message(parts[1], String.join(" ", partsout(parts, 2)));
						proxy.sendMessage(sessionID, NewMessage);
					} catch (RemoteException ex) {
						// handle communication exception
					}
					break;
				case "file":
					try {
						FileInfo NewFileInfo = new FileInfo(parts[1], new File(parts[2]));
						proxy.sendFile(sessionID, NewFileInfo);
					} catch (RemoteException ex) {
						// handle communication exception
					}

					break;
				case "exit":
					try {

						proxy.exit(sessionID);
						isClosed = true;

					} catch (RemoteException ex) {
						// handle communication exception
					}
					break;
				default:
					System.out.println("Invalid command");
					break;
				}
			}

		} catch (UnknownHostException e) {
			System.out.println("Unknown host: 0.0.0.0");
			System.exit(1);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}